								;input in stack
								
								;board: by address
								;player:by value
								
								;output in stack, 2(sp) // or 0(sp)?????
				
win = 1
noWin = -1				

checkwin:	mov r0, -(sp)		;preservation of registers
								
								;we pass parameters for the next function

			mov 6(sp), -(sp)	;pass board address for the count play pieces routine
			mov 6(sp), -(sp)	;pass player parameter for the count play pieces routine
			jsr pc, cntPlay
			mov (sp), playCnt
			bne countP2			;if playCnt is 0 we know for sure hasn't won
			br PLYnoWIN

			
countP2:	mov #3,r0			;gonna sub 3 from player num to get the next player
			sub 10(sp),r0
			mov r0, (sp)		;pass other player num into stack
			jsr pc, cntPlay		
			mov (sp), oppCnt
			bne movesPLY		;if opponnentt play piece count is 0, player has won
			br playWin

movesPLY:	mov 10(sp), (sp)	;moves player num to send for the check moves routine
			jsr pc, cntMoves
			
			tst(sp)				;check if has more than 0 moves for player
			beq movesOPP
			br PLYnoWIN
			
movesOPP:	mov r0, (sp)		;moves opponnent num to send for the check moves routine 
			jsr pc, cntMoves
			tst (sp)			;check if has more than 0 moves for opponnent
			beq findDiff
			br PLYnoWIN
			
findDiff:	cmp playCnt, oppCnt	;if no moves left and player has more piece announce win
			bgt playWin
			br PLYnoWIN
			
playWin:	add sp, 4
			mov (sp)+ r0
			mov win, 2(sp)
			rts pc

PLYnoWIN:	add sp, 4
			mov (sp)+ r0
			mov noWin, 2(sp)
			rts pc

playCnt:	.blkw 1
oppCnt:		.blkw 1
			
			
			
			