Black = 2
White = 1
SkipC = 16
SkipF = 22
Empty = 0
EdgeR = 16
EdgeL = 0
Win = 20
Loss = 177760 ;which is actually -20



. = torg + 2000	
main:		mov pc, sp	;init stack
			tst -(sp) 	;init stack
			;mov #Board, -(sp)
			;jsr r5, movPiece
			;.word 2, 24 
			;tst (sp)+ ;empty stack
			mov #2, -(sp)
			mov #24, -(sp)
			jsr pc, getMaxWP
			tst (sp)+
			tst (sp)+
			mov WinParam, r0
			halt

;minOrMax:	
			
movPiece:	;STILL HAVE TO SAVE REGISTER CONTENT IN STACK!
			mov 2(sp), r0				;asign boardPos to r0 
			mov (r5)+, r1				;assign srcPos to r1
			mov (r5)+, r2				;assign dstPos to r2
			add r0, r1					;add boardPos to srcPos in order to get the actual adress
			add r0, r2					;add boardPos to srcPos in order to get the actual adress 
			mov (r1), r3				;A CHECK - REMOVE
			mov (r1), (r2)				;assign srcPos to dstPos
			mov 0, (r1)					;assign 0 to srcPos
			mov (r1), r3				;A CHECK - REMOVE
			rts r5
			
getMaxWP:	;STILL HAVE TO SAVE REGISTER CONTENT IN STACK! r0, r1, r2, r3, r4
										;check Player Won:			| STACK: srcPos, dstPos, pc
			mov 2(sp), r0				;srcPos 
			mov 4(sp), r1				;dstPos
			tst -(sp)					;getting ready for checkWin	| STACK: srcPos, dstPos, pc, -		
			mov #Board, -(sp)			;getting ready for checkWin	| STACK: srcPos, dstPos, pc, -, #Board
			mov Player, -(sp)			;getting ready for checkWIn	| STACK: srcPos, dstPos, pc, -, #Board, Player
			jsr pc, checkWin			;							| STACK: srcPos, dstPos, pc, *result*, #Board, Player 
			cmp 4(sp), #1				;if Player hasn't won yet
			bne doNext1					;then continue
			;releasing everything and returning:
				mov #Win, WinParam			;return 20 WP
				tst (sp)+					;							| STACK: srcPos, dstPos, pc, *result*, #Board
				tst (sp)+					;							| STACK: srcPos, dstPos, pc, *result*
				tst (sp)+					;							| STACK: srcPos, dstPos, pc
				rts pc
			
		doNext1:						;check Adversary won:		| STACK: srcPos, dstPos, pc, *result*, #Board, Player
			mov (sp), r2
			neg r2						;turning player to adversary (1 to 2 and 2 to 1)
			add #3, r2					;turning player to adversary (1 to 2 and 2 to 1)
			mov r2, (sp)				;							| STACK: srcPos, dstPos, pc, *result*, #Board, *Adversary*
			jsr pc, checkWin			;							| STACK: srcPos, dstPos, pc, *result2*, #Board, *Adversary*
			cmp 4(sp), #1
			bne doNext2
			;releasing everything and returning:
				mov #Loss, WinParam			;return -20 WP
				tst (sp)+					;							| STACK: srcPos, dstPos, pc, *result2*, #Board
				tst (sp)+					;							| STACK: srcPos, dstPos, pc, *result2*
				tst (sp)+					;							| STACK: srcPos, dstPos, pc
				rts pc
			
		doNext2:						;check if steps == 0:			| STACK: srcPos, dstPos, pc, *result2*, #Board, *Adversary*
			cmp Steps, #0				;
			bne doNext3					;
			;releasing everything and returning:
				mov Player, (sp)			;							| STACK: srcPos, dstPos, pc, *result2*, #Board, Player
				jsr pc, calcWP				;calcWP; puts result in r4
				mov r4, WinParam			;return calcWP
				tst (sp)+					;							| STACK: srcPos, dstPos, pc, *result2*, #Board
				tst (sp)+					;							| STACK: srcPos, dstPos, pc, *result2*
				tst (sp)+					;							| STACK: srcPos, dstPos, pc
				rts pc
			
		doNext3:						;check if both can't move:	| STACK: srcPos, dstPos, pc, *result2*, #Board, *Adversary*
			tst (sp)+					;							| STACK: srcPos, dstPos, pc, *result2*, #Board
			jsr pc, canMove				;							| STACK: srcPos, dstPos, pc, *result3*, #Board
			cmp 2(sp), #1
			bne doNext4
			;releasing everything and returning:
				mov #0, WinParam
				tst (sp)+					;							| STACK: srcPos, dstPos, pc, *result3*
				tst (sp)+					;							| STACK: srcPos, dstPos, pc
				rts pc
				
		doNext4:						;							| STACK: srcPos, dstPos, pc, *result3*, #Board
			;starting the dreaded recursion loop:
			;r3 will hold the branches' WP
			tst (sp)+
			tst (sp)+
			rts pc
			
			
			
;SHIT THAT WAS PREVIOUSLY FROM ATAM2			
cntMoves:	mov r0, -(sp)							;preserving r0, now used as an index for game tiles
			mov 6(sp), r0
			mov r0, BoardB
			mov r0, BoardE
			mov r0, BordLRo
			add #176, BoardE
			add #160, BordLRo
			mov r1, -(sp)							;preserving r1, now used to count the possible moves
			clr r1
			mov r2, -(sp)							;preserving r2, now used for calculations
			mov r3, -(sp)							;preserving r3, now used for calculations
			mov r4, -(sp)							;preserving r4, now used to hold player's turn
			mov 14(sp) , r4
			
			add #156, r0							;starts to go throught indexes from the end to beginning
			cmp #Black, r4			
			beq loopB
			
				sub #136, r0						;starts at the second last row, because there is no use checking for the last row
				br loopW							;checks whose turn it is
			
		;a loop for counting possible moves in case player is Black
			
	loopB:
			cmp (r0), #Black
			bne nextB								;if not Black, proceed to nextB tile
			
	;Black left border check:			

				mov r0, r3							;for r2r3 we check if r3(mod 20) == 0, which means we're at the left border
				sxt r2					
				div #20, r2
				cmp r3, #EdgeL						;if on left border - 
				beq tileRB							; - proceed to check right move tile (skip the right border check)			
			
	;B left occupation check:
		
			mov r0, r3
			add #SkipC, r3
			cmp (r3), #White
			bgt borderRB 							;if left move tile has Black, proceed to check right border
			beq leapLB								;if left move tile has White, proceed to check left leap
					
				inc r1								;else increase numOfSteps by 1
				br borderRB							;proceed to check the right border 

		;checks if player can leap (eat) the playpiece on its left
			
	leapLB:	
			cmp r3, BordLRo							;if White is at last row -
			bge borderRB							; - proceed to check right border
			
				tst r3
				sxt r2	
				div #20, r2
				cmp r3, #EdgeL						;if White is at left border - 
				beq borderRB						; - proceed to check right border
				
					mov r0, r3					
					add #SkipC, r3
					add #SkipC, r3	
					cmp (r3), #Empty				;if left leap tile is occupied - 
					bne borderRB					; - proceed to check right border
					
						inc r1						;else increase numOfSteps by 1
						br borderRB					;proceed to check the right border
					
		;Black right border check:
		
	borderRB:	
			mov r0, r3
			sxt r2
			div #20, r2
			cmp r3, #EdgeR							;if on right border - 
			beq nextB								;proceed to nextB tile
			
		;the label signifies a situation where we want to check if Black player can proceed to the right diagonal, when we know he is not on the right border
			
	tileRB:
			mov r0, r3
			add #SkipF, r3
			cmp (r3), #White			
			bgt nextB								;if right move tile has Black, proceed to nextB tile
			
				beq leapRB							;if right move tile has White, proceed to check right leap 
				
					inc r1							;else increase numOfSteps by 1
					br nextB						; proceed to nextB tile
			
		;checks if player can leap (eat) the playpiece on its right
			
	leapRB:	
			cmp r3, BordLRo							;if White is at last row - 			
			bge nextB								; - proceed to nextB tile
			
				tst r3
				sxt r2
				div #20, r2
				cmp r3, #EdgeR						;if White is at right border - 
				beq nextB							;proceed to nextB tile
				
					mov r0, r3
					add #SkipF, r3					
					add #SkipF, r3					
					cmp (r3), #Empty				;if right leap tile is occupied - 
					bne nextB						; - proceed to nextB tile
					
						inc r1						;else increase numOfSteps by 1
						br nextB

		;checks next tile for moves.
						
	nextB:
			sub #2, r0								;going from end to start, each tile a word (so *2* bytes)
			cmp r0, BoardB
			bge loopB
				
		;unfold routine and Empty the stack
		
				mov r1, 20(sp)
				mov (sp)+, r4
				mov (sp)+, r3
				mov (sp)+, r2
				mov (sp)+, r1
				mov (sp)+, r0		
				rts pc

		;a loop for counting possible moves in case player is White			
			
	loopW:		
			cmp (r0), r4					;checks wether current tile has a White playpiece
			bne nextW						;if not checks next tile
			
				mov r0, r3						;
				sxt r2							;
				div #20, r2						;finds the reminders of the index, each even reminder between 0 - 20 (excluding) indicates a different horizontal location
			
				cmp r3, #EdgeL
				beq tileRW					;if it's right by the left ledge, move is illegal, there's no need to check if next to right ledge, since it is 
											;obviously by the left ledge.
			
			mov r0, r3					
			sub #SkipF, r3				
			
			cmp (r3), #White				;if space has a White playpiece, it cannot jump there
			beq borderRW
				cmp (r3), #Black			;if space has a Black playpiece try and initiate eat
				beq leapLW					
					inc r1					;otherwise space is Empty so a move is possible
					br borderRW
	
		;checks if player can leap (eat) the playpiece on its left
	
	leapLW:
			tst r3
			sxt r2						
			div #20, r2						;finds the reminders of the index, to determine if close to the left
			
			cmp r3, #EdgeL
			beq borderRW					;if it's right by the left ledge, move is illegal

				mov r0,r3					;otherwise, check if close to ledge has destroyed r2, we have to recreate the checked index and find now the third 
				sub #SkipF, r3				;diagonal tile away from checked tile
				sub #SkipF, r3				;
				cmp r3, BoardB
				blt borderRW				;if index is negative that must mean eating would get the piece out of bounds.
				
					cmp (r3), #Empty		;if space is Empty count as eat
					bne borderRW
					inc r1					;eating is possible. now to check a move to the right
					br borderRW
			
		;checks if playpiece is on the right border (check if can jump to the right)
		
	borderRW:
			mov r0, r3						;
			sxt r2							;
			div #20, r2						;finds the reminders of the index, each even reminder between 0 - 20 (excluding) indicates a different horizontal location
						
			cmp r3, #EdgeR
			beq nextW						;if it's right by the right ledge, move is illegal, check the next tile
			
		;the label signifies a situation where we want to check if Black player can proceed to the right diagonal, when we know he is not on the right border
			
			
	tileRW:
			mov r0, r3						;
			sub #SkipC, r3					;
			cmp (r3), #White				;if space has a White playpiece, it cannot jump there
			beq nextW
				cmp (r3), #Black			;if space has a Black playpiece try and initiate eat
				beq leapRW
				inc r1						;otherwise space is Empty so a move is possible
				br nextW
		
		;checks if player can leap (eat) the playpiece on its left
	
	leapRW:	
			tst r3
			sxt r2						
			div #20, r2						;finds the reminders of the index, to determine if close to the right
			
			cmp r3, #EdgeR
			beq nextW						;if it's right by the right ledge, move is illegal
			
				mov r0,r3					;otherwise, check if close to ledge has destroyed r2, we have to recreate the checked index and find now the third 
				sub #SkipC, r3				;diagonal tile away from checked tile
				sub #SkipC, r3				;
				cmp r3, BoardB				;
				blt nextW					;if index is negative, that must mean eating would get the piece out of bounds.
			
				cmp (r3), #Empty			;if space is Empty count as eat
				bne nextW
					inc r1					;eating is possible. now to check the nextW tile
					br nextW				;checkes nextW tile

		;check next tile index
			
	nextW:	
			add #2, r0						;check nextW tile
			cmp r0, BoardE					;if index is 176 board has been scanned top to bottom -> halt
			ble loopW

		;unfold routine and Empty the stack
		
				mov r1, 20(sp)
				mov (sp)+, r4
				mov (sp)+, r3
				mov (sp)+, r2
				mov (sp)+, r1
				mov (sp)+, r0			
				rts pc
		
BoardB:		.blkw 1						;gonna hold the addresses of the end of the game board and beginning
BoardE:		.blkw 1						;
BordLRo:	.blkw 1						;address of the first tile in the last row of the board










;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~







		

	;checks if player has any playpieces on board, if not that is not a winning situation

checkWin:	
			mov r0, -(sp)				;preservation of registers, now used to hold current players
										;| - | board address | player | reg link | r0 |

		;we pass parameters for the next function
		
			tst -(sp)					;| - | board address | player | reg link | r0 | - |
			mov 8(sp), -(sp)			;| - | board address | player | reg link | r0 | - | board address |
			mov 8(sp), -(sp)			;| - | board address | player | reg link | r0 | - | board address | player |
			jsr pc, cntPlay				;| - | board address | player | reg link | r0 | number of player pieces | board address | player |
			mov 4(sp), PlayCnt			
			bne countP2					;if PlayCnt is 0 we know for sure hasn't won
				br PLYnoWIN

		;checks if opponnent has any playpieces on board, if not player has won
			
	countP2:
			mov #3,r0					;used to get the number of the other player
			sub 12(sp),r0				;
			mov r0, (sp)				;| - | board address | player | reg link | r0 | number of player pieces | board address | opponnent |
			jsr pc, cntPlay				;| - | board address | player | reg link | r0 | number of opponent pieces | board address | opponnent |
			mov 4(sp), OppCnt
			bne movesP1					;if opponnent play piece count is 0, player has won
				br playWin

		;checks if player has any moves to make.
			
	movesP1:
			mov 12(sp), (sp)			;| - | board address | player | reg link | r0 | number of opponent pieces | board address | player |
			jsr pc, cntMoves			;| - | board address | player | reg link | r0 | player possible moves | board address | player |
			tst 4(sp)					;check if has more than 0 moves for player
			beq movesP2
				br PLYnoWIN

		;checks if opponnent has any moves to make. if both players can't move count difference between playpiece number
	
	movesP2:
			mov r0, (sp)				;| - | board address | player | reg link | r0 | player possible moves | board address | opponnent |
			jsr pc, cntMoves			;| - | board address | player | reg link | r0 | opponnent possible moves | board address | opponnent |
			tst 4(sp)					;check if has more than 0 moves for opponnent
			beq findDiff
				br PLYnoWIN
			
		;finds who wins by checking who has more pieces on board		
			
	findDiff:	
			cmp PlayCnt, OppCnt			;if no moves left and player has more piece announce win
			bgt playWin
				br PLYnoWIN
			
		;unwraps routines and empties stack, win flag is up
			
	playWin:	
			add #6, sp					;| - | board address | player | reg link | r0 |
			mov (sp)+, r0				;| - | board address | player | reg link |
			mov #1, 6(sp)				;| 1 | board address | player | reg link |
			rts pc
			
		;unwraps routines and empties stack, no known win flag is up
			
	PLYnoWIN:
			add #6, sp					;| - | board address | player | reg link | r0 |
			mov (sp)+, r0				;| - | board address | player | reg link |
			mov #-1, 6(sp)				;| -1 | board address | player | reg link |
			rts pc

PlayCnt:	.blkw 1
OppCnt:		.blkw 1






;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




	;counts play pieces for current player
	
cntPlay:	mov r0, -(sp)				;preserve r0, now used to hold the player's num
			mov 4(sp), r0
			mov r1, -(sp)				;preserve r1, now used to hold the address of board's tiles
			mov 10(sp), r1	
			mov r1, BoardS
			mov r2, -(sp)
			clr r2						;preserve r2, now used to count playpieces
			
			add #200, r1
			
			
	loop:
			dec r1
			dec r1
			cmp r1, BoardS
			ble exit1
			
				cmp (r1), r0
				bne loop
			
					inc r2
					br loop
			
	exit1:		
			mov r2, 14(sp)
			mov (sp)+, r2
			mov (sp)+, r1
			mov (sp)+, r0
			rts pc

BoardS:		.blkw 1						;gonna hold the addresses of the end of the game board and beginning






;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





	;checks if both players cant move, if so returns 1, else returns -1
	
canMove:	tst -(sp)					;| - | board address | link reg | - |
			mov 4(sp), -(sp)			;| - | board address | link reg | - | board address | 
			mov #1, -(sp)				;| - | board address | link reg | - | board address | 1 |
			jsr pc, cntMoves			;| - | board address | link reg | (moves for player 1) | board address | 1 |
			tst 4(sp)
			bne exit2
			
				mov #2, (sp)			
				jsr pc, cntMoves		;| - | board address | link reg | (moves for player 2) | board address | 2 |
				tst 4(sp)
				bne exit2
			
					mov #1, 12(sp)		;if none can move, we want to return 1
					add #6, sp
					rts pc
					
exit2:		mov #-1, 12(sp)				;can move, return -1
			add #6, sp
			rts pc
			
			
			



			
			
			

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





calcWP:	
		;passes parameters for next function through the stack
			
			tst -(sp)					;| board address | player | link reg | - |
			mov 6(sp), -(sp)			;| board address | player | link reg | - | board address |
			mov 6(sp), -(sp)			;| board address | player | link reg | - | board address | player |
			jsr pc, cntPlay				;| board address | player | link reg | number of pieces for player | board address | player |
			
			mov (sp), r4				;we want to check now how many playpieces the other player has
			neg r4
			add #3, r4
			mov r4, (sp)				;| board address | player | link reg | number of pieces for player | board address | opponent |
			mov 4(sp), r4				
			jsr pc, cntPlay
			sub 4(sp), r4				;now r4 holds the WP
			add #6, sp					;| board address | player | link reg |
			rts pc
			
			






										
										
boardPos: .blkw 1
										
.=torg + 11000
Board:			.word	1, 0, 1, 0, 1, 0, 1, 0
				.word	0, 0, 0, 0, 0, 0, 0, 0
				.word	0, 0, 0, 0, 0, 0, 0, 0
				.word	0, 0, 0, 0, 0, 0, 0, 0
				.word	0, 0, 1, 0, 0, 0, 0, 0
				.word	0, 0, 0, 2, 0, 0, 0, 0
				.word	0, 0, 0, 0, 0, 0, 0, 0
				.word	0, 0, 0, 2, 0, 2, 0, 2
Player:	.word	1
Steps:  .word   2

;output
SrcPos: .blkw 1
DstPos: .blkw 1
WinParam: .blkw 1 
